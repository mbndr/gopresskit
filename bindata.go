// Code generated by go-bindata.
// sources:
// static/css/style.css
// static/templates/base.html
// DO NOT EDIT!

package presskit

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x73\xe2\x46\x10\x3d\x4b\xbf\xa2\x83\xcb\x55\x89\x0b\x7d\x51\x85\x9d\x88\x4b\x72\x4a\x2e\xce\x61\xd7\x7f\xa0\x91\x9a\x99\x2e\xe6\x43\x9e\x19\x09\xd8\x2d\xfe\xfb\xd6\x48\x80\x8d\xcd\x5e\xf6\x84\xd0\xbc\x7e\xdd\xef\xf5\xd3\xac\x6d\x7b\x80\xef\x69\xd2\x61\xdb\xb2\x11\x35\x54\xcb\x6e\x0f\xe5\x2a\x4d\x36\xd6\x84\x6c\x83\x9a\xd5\xa1\x86\xd9\x8b\xa3\x75\xdf\x48\x0a\xf0\xfc\x75\x36\x87\x7f\x1c\xa3\x9a\xc3\x7f\xa4\x06\x0a\xdc\xe0\x1c\x3c\x1a\x9f\x79\x72\xbc\x39\xd7\x7a\xfe\x46\x35\x94\xf9\x5f\xa4\x57\x69\xa2\xd8\x50\x26\x89\x85\x0c\x75\x95\x3f\xc6\x77\xc7\x34\x65\x2d\xe6\x30\x70\x4b\x36\x0e\xb1\xe3\x36\xc8\x1a\xaa\xb2\xbc\x1f\x4f\x5b\x1e\xf2\xd7\xde\x06\x8a\x87\xef\x38\xab\x7c\x31\x72\x76\xd6\x73\x60\x6b\x6a\x70\xa4\x30\xf0\x40\xab\x34\xd1\xe8\x04\x9b\x1a\x2a\xd2\x51\xc7\x31\x4d\x7d\x87\x26\xf7\xb6\x77\xcd\x48\xd4\xb2\xef\x14\x1e\x6a\x58\x2b\xdb\x6c\x57\x69\x12\x68\x1f\x32\x54\x2c\x22\x51\x1c\x70\xac\xba\x6b\xac\x09\x64\x02\xc4\x29\x58\xa3\x20\x1f\x1f\xdf\x99\x95\xad\x6d\x08\x56\xd7\xb0\x58\x76\xfb\xa9\xc6\xe0\xc0\x02\xe3\x4c\x20\xab\xdc\xe0\x90\x49\xc2\x96\xdc\x95\xc5\xe5\x68\xf2\x65\xd4\x0b\x4d\xf9\x89\x03\x7f\x46\x11\x97\x74\x22\x19\x7d\xd9\x4d\xc6\xc2\xda\xaa\xf6\x13\x4b\xaf\xf2\x7e\x9b\x19\x1c\x6e\x2e\xfa\x03\xb8\xbb\x25\xb0\x2a\x6f\x08\x54\x9c\x2b\x34\xa2\x47\x41\x99\x27\x45\x4d\x80\xd3\x4f\xdc\x96\xb2\x18\x6e\xda\x29\x17\x97\x6d\x9e\xd3\xf5\x2f\x59\x27\x18\xe7\x30\x7b\x61\x4d\x1e\xfe\xa7\x1d\x7c\xb1\x1a\xcd\x6c\x0e\xe3\x9b\x39\x4c\xc9\xf2\x57\x4c\xac\x45\xfe\xe6\xcd\x07\x33\x17\x97\x91\xcf\xf0\x5e\x45\x98\x62\x1f\x32\x1f\x0e\x8a\xb2\x70\xe8\xa8\x06\xff\xda\xa3\xa3\x6b\xa8\xe2\xbc\xb5\x66\x4c\x4b\x63\x95\x75\x35\xdc\x95\xe5\x9f\x65\x59\x9e\xd3\xd2\x52\x63\x1d\x4e\xd9\x1b\x93\x1d\xa4\xb3\xbd\x90\xbf\x9e\x9c\x73\x4d\x77\xaa\xc8\x62\x9f\x77\xba\x82\xed\x2e\x09\x39\x63\x73\xde\x38\xd4\x94\xc5\xff\xc8\xe6\x94\x91\x5b\x1f\x45\xf1\x00\xcf\x28\xb8\xf9\x0d\x9e\x71\x4b\x1e\x7c\xef\x08\x82\x24\x78\x2b\x65\x0f\x92\x85\x04\x32\x51\x08\x04\x0b\x5e\xda\xdd\x08\x22\x13\xd8\x11\x4c\xdd\xd2\x04\x1e\xe0\x45\xa2\xd9\xfa\x08\x92\x21\x74\x75\x51\xa0\x69\x35\x8a\xdc\x53\xb1\x28\xab\xaa\xa8\xaa\xc2\x91\xef\xac\xf1\x3c\x50\x46\x7a\x4d\xad\x2f\xe0\xa1\xf8\xec\xc0\xf2\x31\x5f\xde\x5f\xcb\x9a\xfa\x5c\x6b\xc1\xb5\xb7\xaa\x0f\x51\xcb\xd9\x89\x44\xd1\x26\x4c\x4f\x57\x17\x47\x72\xba\x65\xde\xee\x91\xbf\x35\xb5\x8c\xf0\xbb\xc6\x7d\x76\x82\x3e\x3d\x3e\x75\xfb\x3f\x62\x8f\x29\x8f\x57\x36\x4f\x5b\x49\x8e\xe9\x31\xfd\x11\x00\x00\xff\xff\x97\x60\xc7\x38\x20\x05\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 1312, mode: os.FileMode(436), modTime: time.Unix(1508435100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xeb\x8f\xdb\xb8\x11\xff\x6c\xff\x15\x73\x2a\x70\xb8\x03\x62\xa9\xbb\x3d\xb4\x87\x9c\xac\x22\xd9\xbd\xe0\x16\xb8\x6b\xd2\x64\xdb\xa2\xfd\x46\x49\x63\x8b\x17\x4a\xd4\x91\x94\x9d\xcd\xc2\xff\x7b\x41\x52\x0f\xea\xe5\x47\x1c\x7f\xb1\x2d\x0e\xe7\xf1\x9b\xe1\x70\x66\x14\x7e\x73\xff\xf6\xee\xf1\xbf\xef\x7e\x86\x4c\xe5\x2c\x5a\x86\xcd\x17\x92\x34\x5a\x2e\xc2\x1c\x15\x81\x24\x23\x42\xa2\x5a\x7b\x95\xda\xac\x7e\xf4\xda\xe7\x05\xc9\x71\xed\xed\x28\xee\x4b\x2e\x94\x07\x09\x2f\x14\x16\x6a\xed\xed\x69\xaa\xb2\x75\x8a\x3b\x9a\xe0\xca\xfc\x79\x01\xb4\xa0\x8a\x12\xb6\x92\x09\x61\xb8\xbe\xf1\xa2\x25\x00\x40\xc8\x68\xf1\x11\x04\xb2\xb5\x27\xd5\x13\x43\x99\x21\x2a\x0f\xd4\x53\x89\x6b\x4f\xe1\x27\x15\x24\x52\x7a\x90\x09\xdc\xac\xbd\x4c\xa9\x52\xbe\x0c\x82\x24\x2d\x7e\x97\x7e\xc2\x78\x95\x6e\x18\x11\xe8\x27\x3c\x0f\xc8\xef\xe4\x53\xc0\x68\x2c\x83\x8a\x7e\xa4\x2a\xb8\xf5\x6f\xff\xe6\xdf\xea\xed\xf6\x81\xbf\x15\x24\xa5\x58\x28\x3f\xa7\x85\xaf\xb9\x7e\x81\x06\x9a\x9b\xa1\xaa\x19\x2c\x42\x45\x15\xc3\xe8\xf9\x19\xfc\x3b\x9e\x97\xa4\x78\xf2\x1f\xf5\x13\x38\x1c\xc2\xc0\xae\x2d\xc3\xc0\xa2\x19\xc6\x3c\x7d\x8a\x96\x56\x6a\x4a\x77\x90\x30\x22\xe5\xda\xab\x3e\xae\x34\x72\x84\x16\x28\xc0\xfd\xb3\x4a\xb0\x50\x28\x6a\x45\x27\xb6\x6d\x05\x4d\xbd\x9a\x63\x8f\x84\xa6\x6b\xaf\x20\x3b\xba\x25\x8a\xf2\xc2\x73\xb6\x18\x6f\xac\x72\x4c\x69\x95\xaf\x6e\x56\x3f\x38\xcc\x5b\x0e\xd9\x4d\xb3\xa1\x20\xbb\x95\x56\x5e\x2b\x31\x6d\x63\x76\x33\xc1\x80\x4c\xec\xaf\x11\x74\xb9\xfc\x07\x63\x49\x15\xfa\xbf\x6a\x0f\x1c\x0e\x7d\x11\xed\x22\x89\x91\x19\x51\x64\x42\x52\xc5\x1c\xdb\x0a\xb2\x03\xfb\xb5\x92\x34\xc5\x21\x32\xbd\x8d\x8c\x46\x21\xa9\x75\xfa\xd3\x86\x24\xca\xfa\x3d\x7a\xd3\xfc\xd4\xf2\xc2\x80\xd1\x68\xb9\x5c\x98\xcf\xf3\x33\xdd\x74\xea\xdd\xa3\x4c\x04\x2d\x35\xbc\x87\xc3\xac\x98\x45\x5f\x4e\xda\x6d\xf2\x22\x87\x43\x27\xab\x11\x85\x45\x7a\x38\x4c\x4b\xfe\x85\x4a\xc5\xc5\xd3\xe1\x50\xaf\x0e\x64\x64\x76\xd9\x8b\x6a\xba\xb3\x78\xff\x86\x29\x25\xfe\xbf\x69\x8a\x5c\x9e\x6f\xce\xce\xd0\x7b\x91\xdd\x77\x81\xa0\x87\x9c\x6c\xf1\x02\x41\xd4\xd0\x7b\x91\xdd\x77\x81\xa0\x5f\x88\xfc\x95\x6f\xf9\x5b\xf1\x90\x18\x3f\x4d\x22\xc6\xf8\x96\x7b\x91\xa6\x83\x6f\x49\x5e\xfe\x04\x9a\xf8\x22\x97\xfc\xb3\xe2\xca\xd8\x33\xc9\xff\x0f\xb3\xea\x45\x1f\x90\x61\xa2\x30\x85\x57\x42\xd1\x84\x9d\x69\x48\x23\xe3\x4e\x60\x4a\xd5\xac\x10\x85\x24\xf7\xa2\x47\x24\xf9\x65\x5c\x75\xae\x49\xe6\xd9\x26\x76\xdd\x8b\x6a\xc2\x59\xe6\xe3\xa3\x19\x54\xac\x7f\x60\xc3\x20\xa5\xbb\x68\x3a\x59\xd5\x57\xc7\x6c\xa6\xfa\x8b\xc9\x54\xcb\x91\x7f\x4d\x6e\x99\x08\xa4\x45\x48\xf3\x6d\xc3\xac\xc9\x40\x52\x24\x36\x01\xb9\x9b\x4d\xe2\x59\xf6\x6c\x19\x99\x72\x3a\xeb\xce\x90\xf6\x6c\xb8\x5d\xfd\x75\x22\xdb\xb6\x3b\xb3\x5b\x83\xc4\x74\x2e\xca\x6e\x8f\x25\xb3\x72\x9e\xad\x59\x8f\xa3\x7b\xdc\x21\xe3\x25\x8a\x97\x61\x10\x47\x61\x2c\x4e\xec\x68\x02\x60\x2e\xed\x93\xd3\x3c\xfa\x81\xf6\x9a\x48\x4c\x1f\x9c\x33\xb8\x30\x4f\x80\x16\xe0\x4a\xa8\xc9\xa0\xa3\x6b\xbc\x32\xab\x6a\x50\xce\xa4\xe8\x37\xbc\x2a\x52\x5a\x6c\xef\x89\x42\xcd\xef\x18\x7c\xb3\x8b\x35\x7e\x0d\x2f\xd0\xcc\x3a\x0c\x8f\x6e\xfb\x8d\x88\x24\x83\xdb\x3f\xdf\xfc\x78\x44\xb6\xd6\xfe\x8c\x73\xda\xbb\x0d\xaf\x35\xa6\x66\x76\xa6\x19\x6d\x2c\x5c\x77\x75\x5f\x0d\xc1\x3b\x81\x52\xd6\x69\xe8\x5a\x04\x0c\x2f\x08\xe0\x75\x25\x69\xa1\x7f\xd6\x79\xee\x52\x48\x72\x42\x99\xe2\x2f\x5d\xe3\x5d\x35\x47\xc8\x0c\x16\xbf\x0e\x30\x1f\x78\x42\x09\x3b\x76\x44\x4e\xe7\x07\xcb\xe3\xbc\xe4\xf0\xfc\x2c\x48\xb1\xc5\x09\x05\x9a\xa3\xdd\x0b\x99\x5e\x88\xb8\x21\x61\x71\xbe\xe0\x94\x0f\xb0\xb8\xc2\xdc\xf7\xc8\x90\x48\x94\x8e\xbf\xed\xe7\xf1\xed\xfd\xdb\x2f\x48\x35\xaf\xd2\x54\x7b\xf6\xda\xb0\xac\xd9\x8c\xb4\x5a\x8c\x20\x77\x04\x76\x34\xe0\x6b\x64\xfb\xfb\x2c\x56\xd7\x1f\xbe\x8c\x17\x78\x5d\x88\x19\x16\xe7\x46\xd8\x40\x32\x5c\x16\x1a\xd3\x64\xa6\xfa\xb8\xf8\xd6\xfe\xc1\xdc\xda\x67\xf4\x00\xf3\x18\xd7\x37\xfb\x7c\xf5\xaf\x6f\xf7\x63\x81\xe3\xe2\xe1\x6c\x34\xe7\xe8\x3c\xff\x75\x4d\xc3\x9c\x98\x45\xa3\xe6\xb8\x81\x30\xea\xcd\x04\xe2\xa8\x1b\x59\x84\xb1\xd1\xb7\xad\xae\xb4\xc7\xbb\x45\x6b\xcc\x23\x7e\x52\x7d\xed\xbb\x50\x3d\x7d\xc8\x27\x0a\xc9\x63\x8f\x33\x31\x51\x39\xb6\xbd\x8e\x55\xab\xb6\x7d\xd8\xd1\xb4\x96\x3f\x3f\x43\x6d\xb8\xbb\xbd\x2b\x53\xc2\xce\x90\xda\xfe\xae\x56\x8a\x23\xf8\xce\x49\x84\xdf\xbb\x27\x74\x10\x79\x02\x65\xc9\x0b\x49\x77\xf5\xd8\xa4\x2e\xa2\xfe\x25\xf1\x61\x23\x48\x8e\x77\xcd\x68\xe0\x70\xa0\xe6\x41\x37\x2c\xa8\x11\xf3\xdc\xc3\x0f\xfe\xcf\x79\x8c\xa9\x53\x4d\xd5\x18\x35\x7f\xca\xce\x3c\x2c\x3a\x3a\x03\xd9\x28\xa6\x26\x3b\xb8\x1e\x7c\xc3\x3e\xad\x85\xaf\xbd\x10\x3e\xd3\x32\xb0\x54\xfe\x67\x5a\x7a\xd1\xc0\x7e\xc2\x50\x28\x2f\x4a\xf9\xbe\x60\x9c\xa4\x40\x18\x03\x4b\x0e\x44\xc2\x67\x5a\x82\xae\xa9\xe8\x0e\x2d\xa2\x56\x97\xff\xd1\xf2\x03\xfd\x8c\xe0\x39\x8c\x0d\xce\xc6\x56\x7b\xc7\x4e\x60\xad\xcb\x78\x68\x34\x6e\xc3\xae\xef\x66\x6b\x88\x8b\xdf\x91\x4c\x71\xb3\xba\x75\xd0\xef\xdd\x81\xd0\x73\x8c\x6d\x4e\xda\x6e\xa4\xbf\xd8\xe9\x3b\xf0\xd6\xd0\x47\xce\x5a\x58\x46\x8f\x19\x0a\x04\x22\x10\x36\x44\x40\xce\x05\xb6\xc0\xed\x08\x65\x24\x66\x08\x1b\x2e\x60\xaa\x9c\x7f\x01\x71\xa5\x40\x65\x28\x2d\x07\x95\x21\xf0\x02\x25\xec\x11\x36\xc8\x14\xec\x79\xc5\x52\x88\x11\x72\x2e\x15\x54\x12\x37\x15\x03\xc5\xe1\x89\x57\x3e\x3c\x6c\xf4\x37\x64\x64\x87\x20\x4b\x4c\xe8\x86\x26\x20\xf0\x8f\x0a\xa5\x92\x2f\xa0\x34\x37\x2d\xa4\x1c\x26\xe7\x2d\x75\xe1\x05\x95\xe9\x86\xbf\xe9\x42\xf2\x74\x0c\x4e\x36\xf7\x4d\x28\xce\x34\xf5\xd3\x11\xa9\x89\xcf\x8a\x47\x4d\x08\xa4\x48\x81\x26\xbc\x38\x27\x24\x5b\xce\x5f\x1c\x90\x9d\xbd\xda\x98\xab\x23\xb1\x63\x75\x34\x26\xe7\xc8\x8e\x44\x67\x3f\x7d\x3b\xa9\xa2\x3f\x7a\xb9\x46\x6d\xcd\xea\x0c\xb5\xc7\x64\xe7\xa9\xdd\x3b\x52\x47\xc2\xaf\x2d\xc2\xf6\x44\xa4\xa3\x24\xd8\x8c\x7b\xec\x6a\x1d\x7d\xef\x31\xe1\xdb\x82\x3a\xd7\xbd\xd9\x52\xb1\x71\xe6\xe9\x73\x87\xfe\x64\xc6\x58\xd9\x2f\x01\xbc\x5e\xc5\x17\x26\x54\x61\xb4\x32\xe7\xfc\xa1\xd8\x70\x73\x03\x99\x67\x9d\xfd\xe3\xf1\x4d\xbd\xd0\xaa\xe3\x58\xdf\x24\x9d\x09\xfb\xfb\x63\xaf\xa1\xfd\x13\xe3\xae\xf3\x0c\xb7\x6c\xa7\x0c\xaf\xcb\x86\x79\x8b\xdf\x08\x9e\x8f\x2d\x1e\xf7\x23\x83\xa6\xc4\x3c\xe9\x35\xab\x5f\x1b\xaa\x57\x69\x6a\x9c\x4f\xd8\x7c\xbc\xb4\x24\xa0\x15\x9a\xae\x3e\x26\xf8\x9d\x5b\x84\xf4\xdb\xad\x61\x14\x39\xd7\x04\x51\xdf\x16\xb1\x2c\x7f\x5a\x5e\x87\x9e\x5b\x5d\xb8\xd0\xcd\xe0\x35\x3d\x64\x5b\x8c\xa1\x1c\x0e\x42\xcf\xce\x28\x0d\xe0\xdd\xa8\xb4\x3d\x9c\x25\x12\x45\x8b\x2d\xdc\x71\xc6\x48\xcc\x05\x51\x5c\xc8\x41\xe1\x3b\x74\x41\xad\x07\xb8\xa5\x6f\xe9\x66\x26\xeb\x82\x77\x28\x64\x5d\xaa\x0f\x9a\xba\x23\x6d\xf2\x7b\xde\xce\xd9\x9c\x1c\x36\x57\x2c\xbb\x79\x6b\x80\xea\xa9\x71\xef\xc5\xe0\x8d\x07\xc2\xc7\x41\xaa\x05\x9e\x42\xe9\x1f\x24\x9f\x8a\xd3\x2f\x3f\xba\x17\xc3\x35\x58\xb1\x5d\x43\xbf\x41\x2a\xa3\xd7\x15\xd5\xe5\x10\x55\x59\x57\xcd\x34\x6f\x25\xb7\x54\x65\x55\x6c\xde\x45\xe6\x71\x91\x8a\x60\xcb\x4b\xdd\xa3\x7f\xa4\xca\x8b\xba\xdf\xdf\x7d\xaf\xd5\x84\x15\x48\x44\xe0\x82\x6e\xa9\x3e\xf1\x3d\x6e\x2f\x83\x60\xbf\xdf\xfb\x3b\x46\xf2\x18\x51\x18\x96\x66\x7b\x60\x8a\x26\xbf\xcc\xca\xbf\x97\xeb\xc4\xc6\x9f\x17\xd5\x3f\xec\x68\xbe\x3c\x3a\x73\x77\xfe\x36\xfd\xf0\x32\x0c\xec\x7b\xc9\x30\xb0\xef\x7e\xff\x1f\x00\x00\xff\xff\x6c\x27\x85\xbc\x13\x1e\x00\x00")

func templatesBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseHtml,
		"templates/base.html",
	)
}

func templatesBaseHtml() (*asset, error) {
	bytes, err := templatesBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.html", size: 7699, mode: os.FileMode(436), modTime: time.Unix(1508507359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css":       cssStyleCss,
	"templates/base.html": templatesBaseHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"css": {nil, map[string]*bintree{
		"style.css": {cssStyleCss, map[string]*bintree{}},
	}},
	"templates": {nil, map[string]*bintree{
		"base.html": {templatesBaseHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
